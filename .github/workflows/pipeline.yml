name: CI/CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "development" ]
  pull_request:
    branches: [ "development" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write # required to use OIDC authentication
      contents: read # required to checkout the code from the repo
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
  
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm i
      - run: npm run build

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v3
        with:
          name: build-step-output
          path: |
            dist/
            package-lock.json
          retention-days: 1

  deploy:
    runs-on: ubuntu-latest # the operating system your job should run on
    needs: [build]
    steps:
      - name: Checkout Latest Repo
        # checks out your repository under the GitHub workspace so that your workflow can access it
        uses: actions/checkout@v2

      - name: Generate Deployment Package 
        # zip all files except .git
        run: zip -r deploy.zip * -x "**.git**"

      - name: Get timestamp
        uses: gerred/actions/current-time@master
        id: current-time

      - name: Run string replace
        uses: frabert/replace-string-action@master
        id: format-time
        with:
          # replaces '[:\.]+' in the timestamp with '-'
          pattern: '[:\.]+'
          string: "${{ steps.current-time.outputs.time }}"
          replace-with: '-'
          flags: 'g'

      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: brill-api
          environment_name: brill-api-env
          region: ${{ secrets.AWS_REGION }}
          version_label: "brill-api-source"
          deployment_package: deploy.zip
          use_existing_version_if_available: true

      - name: Deployed!
        run: echo App deployed to ELB